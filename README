docker build -t docker-nestjs .

# Create custom network
docker network create node-api-network

docker run -it --rm --name mysql_server --network node-api-network -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=laravel -p 3306:3306 -d mysql:8.0

docker run -it --rm --name docker-nestjs --network node-api-network -e NODE_ENV=production -p 3000:3000 docker-nestjs

# Here we define how much resource a container will consume.
docker run -it --rm -d --name docker-nestjs --network node-api-network --memory=512m --cpus=1 -p 3000:3000 docker-nestjs



ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';


# To make the data persistent in MySQL container, you can use Docker volumes. A volume is a persistent data storage mechanism provided by Docker. You can create a volume and mount it to the container so that the data is stored outside the container and persists even if the container is deleted12.

# Hereâ€™s how you can use volumes to make your MySQL data persistent:

docker run -it --rm --name mysql_server --network node-api-network -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=laravel -p 3306:3306 -d -v /my/own/datadir:/var/lib/mysql mysql:8.0

# In this command, -v /my/own/datadir:/var/lib/mysql creates a new volume named /my/own/datadir and mounts it to /var/lib/mysql inside the container. This will store your MySQL data outside the container and persist even if the container is deleted.


#delete all docker images

docker rmi -f $(docker images -q)

# This command removes all the Docker containers that are currently running and stops them forcefully.
docker rm -f $(docker ps -aq) 

# To delete all the stopped Docker containers, you can use the following command:
docker container prune -f