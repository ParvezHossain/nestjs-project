version: '3'

networks:
  node_api_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16

services:

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql_server_master   
      PMA_USER: root
      PMA_PASSWORD: root
    ports:
      - "8080:80"  # You can access phpMyAdmin at http://localhost:8080
    networks:
      node_api_network:
        ipv4_address: 172.19.0.2

  mysql_server_master:
    image: mysql:latest
    container_name: mysql_server_master
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: laravel
    ports:
      - 3306:3306
    volumes:
      - mysql_server_master:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      node_api_network:
        ipv4_address: 172.19.0.3
  
  mysql_server_slave:
    image: mysql:latest
    container_name: mysql_server_slave
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: laravel
    volumes:
      - mysql_server_slave:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      node_api_network:
        ipv4_address: 172.19.0.7

  node_server_1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node_server_1
    working_dir: /app
    ports:
      - "3000:3000"
    depends_on:
       - redis_server
       - mysql_server_master
       - mysql_server_slave
    environment:
      - NODE_ENV=production
      - HOST_IP=node_server_1
    networks:
      node_api_network:
        ipv4_address: 172.19.0.5
  node_server_2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node_server_2
    working_dir: /app
    ports:
      - "3001:3000"
    depends_on:
       - redis_server
       - mysql_server_master
       - mysql_server_slave
    environment:
      - NODE_ENV=production
      - HOST_IP=node_server_2
    networks:
      node_api_network:
        ipv4_address: 172.19.0.8

  node_server_3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node_server_3
    working_dir: /app
    ports:
      - "3002:3000"
    depends_on:
       - redis_server
       - mysql_server_master
       - mysql_server_slave
    environment:
      - NODE_ENV=production
      - HOST_IP=node_server_3
    networks:
      node_api_network:
        ipv4_address: 172.19.0.9
  node_server_4:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node_server_4
    working_dir: /app
    ports:
      - "3003:3000"
    depends_on:
       - redis_server
       - mysql_server_master
       - mysql_server_slave
    environment:
      - NODE_ENV=production
      - HOST_IP=node_server_4
    networks:
      node_api_network:
        ipv4_address: 172.19.0.10

  nginx:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # - ./nginx/conf.d:/etc/nginx/conf.d
      # - ./nginx/conf.d/default.conf:/etc/nginx/default.conf:ro
      - nginx_config:/etc/nginx/conf.d
      - ./nginx/conf.d/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl
      # - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - node_server_1
      - node_server_2
      - node_server_3
      - node_server_4
      - redis_server
    networks:
      node_api_network:
        ipv4_address: 172.19.0.4


  redis_server:
    image: redis:latest
    container_name: redis_server
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data  
    networks:
      node_api_network:
        ipv4_address: 172.19.0.6  # Adjust IP address as needed

volumes:
  mysql_server_master:
  mysql_server_slave:
  redis_data:
  nginx_config:


